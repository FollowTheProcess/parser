name: CI

on:
  pull_request:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

permissions: {}

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run Tests
        run: go test -race ./...

  cov:
    name: CodeCov
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run Tests
        run: go test -race -cover -covermode=atomic -coverprofile=./coverage.out ./...

      - name: Coverage
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.out
          token: ${{ secrets.CODECOV_TOKEN }}

  fuzz-matrix:
    name: Make Fuzz Matrix
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Set Fuzz Matrix
        id: set-matrix
        shell: bash
        run: |
          MATRIX=$(go test -list ^Fuzz -run ^$ | grep '^Fuzz' | jq --raw-input --slurp --compact-output 'split("\n") | map(select(length > 0))')

          echo "matrix=$MATRIX"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  fuzz:
    name: Fuzz
    runs-on: ubuntu-latest
    needs:
      - fuzz-matrix
    strategy:
      matrix:
        fuzz-target: ${{ fromJSON(needs.fuzz-matrix.outputs.matrix) }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run Fuzz Tests
        run: go test -fuzz "^${{ matrix.fuzz-target }}$" -fuzztime 1m

  lint:
    name: Lint
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run Linting
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest

  vulncheck:
    name: Vulncheck
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
        
      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Run govulncheck
        run: govulncheck ./...

  typos:
    name: Typos
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check for Typos
        uses: crate-ci/typos@v1.28.3
